{
  "_args": [
    [
      {
        "raw": "node-hashtable@~0.1.1",
        "scope": null,
        "escapedName": "node-hashtable",
        "name": "node-hashtable",
        "rawSpec": "~0.1.1",
        "spec": ">=0.1.1 <0.2.0",
        "type": "range"
      },
      "/home/kwokgordon/ccac/ccac"
    ]
  ],
  "_from": "node-hashtable@>=0.1.1 <0.2.0",
  "_id": "node-hashtable@0.1.1",
  "_inCache": true,
  "_location": "/node-hashtable",
  "_npmUser": {
    "name": "herenow",
    "email": "leonardoshiro@gmail.com"
  },
  "_npmVersion": "1.3.8",
  "_phantomChildren": {},
  "_requested": {
    "raw": "node-hashtable@~0.1.1",
    "scope": null,
    "escapedName": "node-hashtable",
    "name": "node-hashtable",
    "rawSpec": "~0.1.1",
    "spec": ">=0.1.1 <0.2.0",
    "type": "range"
  },
  "_requiredBy": [
    "/"
  ],
  "_resolved": "https://registry.npmjs.org/node-hashtable/-/node-hashtable-0.1.1.tgz",
  "_shasum": "1e8cb6950fefc573a65e7aa1846a1823e0f33862",
  "_shrinkwrap": null,
  "_spec": "node-hashtable@~0.1.1",
  "_where": "/home/kwokgordon/ccac/ccac",
  "author": {
    "email": "leonardoshiro@gmail.com"
  },
  "bugs": {
    "url": "https://github.com/herenow/node-hashtable/issues"
  },
  "dependencies": {
    "nssocket": "*"
  },
  "description": "This is a simple hashtable, all written in node, to help you access and store your data over multiple workers or modules. It will provide the abstraction to access it through workers (cluster).",
  "devDependencies": {},
  "directories": {},
  "dist": {
    "shasum": "1e8cb6950fefc573a65e7aa1846a1823e0f33862",
    "tarball": "https://registry.npmjs.org/node-hashtable/-/node-hashtable-0.1.1.tgz"
  },
  "engines": {
    "node": ">=0.6"
  },
  "homepage": "https://github.com/herenow/node-hashtable#readme",
  "keywords": [
    "hashtable",
    "cluster",
    "module",
    "worker",
    "API",
    "node",
    "hash-table",
    "simple"
  ],
  "main": "index.js",
  "maintainers": [
    {
      "name": "herenow",
      "email": "leonardoshiro@gmail.com"
    }
  ],
  "name": "node-hashtable",
  "optionalDependencies": {},
  "readme": "node-hashtable\n=========\n\nA simple hashtable written in node (not meant for production).\nIt will help you share data over your node clusters or modules.\n\n\nInstallation\n----------\n```\nnpm install node-hashtable\n```\n\n\nExample\n----------\n\n**With cluster:**\n```javascript\nvar hashTable = require(\"node-hashtable\");\n\nvar cluster = require(\"cluster\");\n\nvar numCPUs = require('os').cpus().length;\n\n\nif(cluster.isMaster) {\n  hashTable.set(\"test\", \"Hello World\");\n\n  // Fork workers.\n  for (var i = 0; i < numCPUs; i++) {\n      cluster.fork();\n  }\n}\nelse if(cluster.isWorker) {\n  hashTable.get(\"test\", function(data) { //Callback is required!\n    console.log(data); //output -> \"Hello World\"\n  });\n}\n```\n\n**Without cluster:**\n```javascript\nvar hashTable = require(\"node-hashtable\");\n\n\nhashTable.set(\"test\", \"Hello World\");\n\nvar data = hashTable.get(\"test\"); //In this case, callback is not required.\n\nconsole.log(data); //output -> \"Hello World\"\n\n```\n\nVerbs\n----------\n\n### hashTable.set(\"key\", data, [callback])\nThis function will set data to a key. If your using a cluster, you should create the callback function!\n```\nhashTable.set(\"key\", data, function(){\n  //Do stuff\n});\n```\n\n### hashTable.get(\"key\", [callback])\nThis function will return data. In this case, if using with a cluster, you NEED to create the callback!\n```\nhashTable.get(\"key\", function(data){\n  //Do stuff\n});\n```\n\n### hashTable.add(\"key\", data, [callback])\nDiferent from .set, this will append data to the key. Be carefull when appending objects.\n```\nhashTable.add(\"key\", \"more stuff\", function(){\n  //Do stuff\n});\n```\n\n### hashTable.update(\"key\", data, [callback])\nThis will find the property you want to update inside the key, and update it.\n```\nhashTable.update(\"key\", {prop: 'new'}, function(){\n  //Do stuff\n});\n```\n\n### hashTable.delete(\"key\", [callback])\nNo explanations needed...\n```\nhashTable.delete(\"key\", function(){\n  //Do stuff\n});\n```\n\n### hashTable.createHash(data, [callback])\nIt will return a hash for your data.\n```\nhashTable.createHash(data, function(hash){\n\n  hashTable.set(hash, data, function(){\n    //Do stuff\n  });\n\n});\n```\n\n### hashTable.createKey(data, [callback])\nIt will return a random hash key.\n```\nhashTable.createKey(data, function(key){\n\n  hashTable.set(key, data, function(){\n    //Memo your key!\n  });\n\n});\n```\n\n### hashTable.clear([callback])\nThis function will clear the entire hash table.\n```\nhashTable.createKey(function(){\n  //Do stuff\n});\n```\n\nThank you \n----------\n- Nodejistu/nssocket for providing the socket middleware",
  "readmeFilename": "README.md",
  "repository": {
    "type": "git",
    "url": "git+https://github.com/herenow/node-hashtable.git"
  },
  "scripts": {
    "start": "node server.js"
  },
  "version": "0.1.1"
}
